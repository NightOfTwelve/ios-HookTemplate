/*
* This header is generated by classdump-dyld 0.7
* on Monday, July 6, 2015 at 12:14:50 AM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/CoreServices/SpringBoard.app/SpringBoard
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <SpringBoard/SpringBoard-Structs.h>
#import <SpringBoard/SBGestureRecognizer.h>

@interface SBFluidSlideGestureRecognizer : SBGestureRecognizer {

	int m_degreeOfFreedom;
	unsigned m_minTouches;
	char m_blocksIconController;
	float _animationDistance;
	float _commitDistance;
	float _accelerationThreshold;
	float _accelerationPower;
	int _requiredDirectionality;
	float _defaultHandSize;
	float _handSizeCompensationPower;
	float _incrementalMotion;
	float _smoothedIncrementalMotion;
	float _cumulativeMotion;
	float _cumulativeMotionEnvelope;
	float _cumulativeMotionSkipped;
	char _hasSignificantMotion;
	CGPoint _movementVelocityInPointsPerSecond;
	CGPoint _centroidPoint;
	double _recognitionStartTimestamp;

}

@property (assign,nonatomic) unsigned minTouches; 
@property (assign,nonatomic) float animationDistance;                                  //@synthesize animationDistance=_animationDistance - In the implementation block
@property (assign,nonatomic) float accelerationThreshold;                              //@synthesize accelerationThreshold=_accelerationThreshold - In the implementation block
@property (assign,nonatomic) float accelerationPower;                                  //@synthesize accelerationPower=_accelerationPower - In the implementation block
@property (assign,nonatomic) int requiredDirectionality;                               //@synthesize requiredDirectionality=_requiredDirectionality - In the implementation block
@property (nonatomic,readonly) int degreeOfFreedom; 
@property (nonatomic,readonly) float cumulativePercentage; 
@property (nonatomic,readonly) float skippedCumulativePercentage; 
@property (nonatomic,readonly) float cumulativeMotion; 
@property (nonatomic,readonly) float incrementalMotion; 
@property (nonatomic,readonly) CGPoint movementVelocityInPointsPerSecond;              //@synthesize movementVelocityInPointsPerSecond=_movementVelocityInPointsPerSecond - In the implementation block
@property (nonatomic,readonly) CGPoint centroidPoint;                                  //@synthesize centroidPoint=_centroidPoint - In the implementation block
@property (nonatomic,readonly) double activeRecognitionDuration; 
-(float)cumulativePercentage;
-(int)completionTypeProjectingMomentumForInterval:(double)arg1 ;
-(void)skipCumulativeMotion;
-(float)skippedCumulativePercentage;
-(CGPoint)centroidPoint;
-(CGPoint)movementVelocityInPointsPerSecond;
-(float)animationDistance;
-(float)cumulativeMotion;
-(double)activeRecognitionDuration;
-(void)touchesBegan:(SBGestureContextRef)arg1 ;
-(void)touchesMoved:(SBGestureContextRef)arg1 ;
-(void)touchesEnded:(SBGestureContextRef)arg1 ;
-(void)touchesCancelled:(SBGestureContextRef)arg1 ;
-(double)activeTouchTimestamp;
-(float)computeIncrementalGestureMotion:(SBGestureContextRef)arg1 ;
-(float)projectMotionForInterval:(double)arg1 ;
-(void)computeGestureMotion:(SBGestureContextRef)arg1 ;
-(void)computeHasSignificantMotionIfNeeded:(SBGestureContextRef)arg1 ;
-(void)computeCentroidPoint:(SBGestureContextRef)arg1 ;
-(void)updateForBeganOrMovedTouches:(SBGestureContextRef)arg1 ;
-(void)updateForEndedOrCancelledTouches:(SBGestureContextRef)arg1 ;
-(float)incrementalMotion;
-(float)computeNonlinearSpeedGain:(float)arg1 ;
-(float)computeHandSizeCompensationGain:(float)arg1 ;
-(int)degreeOfFreedom;
-(unsigned)minTouches;
-(void)setMinTouches:(unsigned)arg1 ;
-(void)setAnimationDistance:(float)arg1 ;
-(float)accelerationThreshold;
-(void)setAccelerationThreshold:(float)arg1 ;
-(float)accelerationPower;
-(void)setAccelerationPower:(float)arg1 ;
-(int)requiredDirectionality;
-(void)setRequiredDirectionality:(int)arg1 ;
-(id)init;
-(void)setState:(int)arg1 ;
-(void)reset;
@end

